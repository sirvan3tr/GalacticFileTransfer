package auth

import (
	"crypto/rand"
	"io"
	"io/ioutil"
	"os"
	"log"
	"encoding/hex"
	"crypto/sha256"
	_ "github.com/mattn/go-sqlite3"
)

func NewFileEncrypt(fileInput string) (sha256String string, key []byte, encrypted string,) {
	// Generate the cipher key
	key = make([]byte, 64)
	_, err := rand.Read(key)
	if err != nil {
		log.Println(err)
	}

	// 1) Open and read the file
	/*
	file, err := ioutil.ReadFile(fileDir + fileName)
	if err != nil {
		log.Println("Error reading file", err)
		return
	} */

	fileDesc, err := os.Open(fileInput)
	if err != nil {
		log.Fatal(err)
	}
	defer fileDesc.Close()

	file, err := ioutil.ReadAll(fileDesc)

	// 1.a) Hash the file
	hsh := sha256.New()
	if _, err := io.Copy(hsh, fileDesc); err != nil {
	  log.Fatal(err)
	}
	hshInBytes := hsh.Sum(nil)
	sha256String = hex.EncodeToString(hshInBytes)

	// 2) Encrypt the file with AES
	// Encryption
	if encrypted, err := encrypt(key, file); err != nil {
		log.Println(err)
	} else {
		err := writer(encrypted, fileInput+"_encryptedFile")
		if err != nil {
			log.Fatal(err)
		}
		log.Printf("File has been encrypted")
	}

	// 3) Look into the Blockchain for the relevant RSA key associated with deeID
	// Call another package that will do this for us.
	// Using some hardcoded examples, in Bytes
	//rsaPubKey := "[45 45 45 45 45 66 69 71 73 78 32 82 83 65 32 80 85 66 76 73 67 32 75 69 89 45 45 45 45 45 10 77 73 73 66 73 106 65 78 66 103 107 113 104 107 105 71 57 119 48 66 65 81 69 70 65 65 79 67 65 81 56 65 77 73 73 66 67 103 75 67 65 81 69 65 54 70 48 112 90 77 111 72 104 102 112 121 102 118 73 49 82 76 57 114 10 69 98 108 68 105 121 80 110 53 70 87 105 65 99 51 114 90 112 112 99 79 65 55 100 51 107 71 78 99 83 106 78 81 83 75 50 84 120 86 82 48 107 107 66 51 107 90 98 43 111 77 119 101 83 98 85 55 50 89 101 53 86 99 113 10 85 78 76 102 48 99 67 113 71 53 83 100 119 43 122 110 118 113 51 43 47 87 85 49 122 111 113 68 66 68 52 105 118 85 43 113 101 83 72 71 114 52 65 121 65 119 50 83 85 78 52 54 70 121 102 97 76 70 102 89 98 66 101 122 10 74 69 99 113 51 122 112 81 49 109 52 97 84 75 43 51 66 112 65 88 80 99 53 79 81 50 114 100 122 73 90 87 114 53 48 110 75 108 110 121 121 53 103 43 56 85 109 120 108 56 112 115 80 67 47 74 98 51 83 110 77 110 113 81 10 56 82 50 107 77 73 53 48 73 43 120 69 52 78 55 54 88 118 106 115 102 119 53 52 110 104 47 101 122 55 80 116 98 98 108 89 102 79 68 117 121 48 109 111 98 67 72 122 67 78 52 74 47 90 115 98 89 110 88 70 118 54 87 70 10 111 69 48 119 75 71 98 76 89 48 86 111 79 53 117 49 51 105 84 81 79 116 116 104 49 100 122 111 54 87 103 66 105 57 78 54 111 57 73 49 55 50 107 104 51 76 113 109 86 106 74 104 114 98 104 74 117 82 122 111 86 79 53 67 10 75 119 73 68 65 81 65 66 10 45 45 45 45 45 69 78 68 32 82 83 65 32 80 85 66 76 73 67 32 75 69 89 45 45 45 45 45 10]"
	//rsaPrivKey := "[45 45 45 45 45 66 69 71 73 78 32 82 83 65 32 80 82 73 86 65 84 69 32 75 69 89 45 45 45 45 45 10 77 73 73 69 112 65 73 66 65 65 75 67 65 81 69 65 54 70 48 112 90 77 111 72 104 102 112 121 102 118 73 49 82 76 57 114 69 98 108 68 105 121 80 110 53 70 87 105 65 99 51 114 90 112 112 99 79 65 55 100 51 107 71 78 10 99 83 106 78 81 83 75 50 84 120 86 82 48 107 107 66 51 107 90 98 43 111 77 119 101 83 98 85 55 50 89 101 53 86 99 113 85 78 76 102 48 99 67 113 71 53 83 100 119 43 122 110 118 113 51 43 47 87 85 49 122 111 113 68 10 66 68 52 105 118 85 43 113 101 83 72 71 114 52 65 121 65 119 50 83 85 78 52 54 70 121 102 97 76 70 102 89 98 66 101 122 74 69 99 113 51 122 112 81 49 109 52 97 84 75 43 51 66 112 65 88 80 99 53 79 81 50 114 100 10 122 73 90 87 114 53 48 110 75 108 110 121 121 53 103 43 56 85 109 120 108 56 112 115 80 67 47 74 98 51 83 110 77 110 113 81 56 82 50 107 77 73 53 48 73 43 120 69 52 78 55 54 88 118 106 115 102 119 53 52 110 104 47 101 10 122 55 80 116 98 98 108 89 102 79 68 117 121 48 109 111 98 67 72 122 67 78 52 74 47 90 115 98 89 110 88 70 118 54 87 70 111 69 48 119 75 71 98 76 89 48 86 111 79 53 117 49 51 105 84 81 79 116 116 104 49 100 122 111 10 54 87 103 66 105 57 78 54 111 57 73 49 55 50 107 104 51 76 113 109 86 106 74 104 114 98 104 74 117 82 122 111 86 79 53 67 75 119 73 68 65 81 65 66 65 111 73 66 65 81 67 88 121 113 81 76 122 49 53 121 121 49 83 89 10 85 83 107 122 75 56 105 74 51 51 105 99 73 71 121 80 52 78 68 103 86 79 66 43 79 107 65 98 55 114 112 74 81 112 70 102 90 115 81 79 49 78 111 55 100 122 88 111 74 81 69 118 98 115 56 80 75 122 119 122 75 73 98 90 10 106 79 67 74 43 82 77 80 107 88 72 99 49 47 116 72 52 83 72 101 112 53 103 77 72 67 89 67 54 109 98 110 56 100 118 56 110 89 113 99 71 76 114 73 80 113 82 73 97 88 112 67 80 69 57 107 118 73 99 43 77 83 53 52 10 52 84 110 107 65 117 100 110 118 52 88 109 74 88 90 66 88 100 79 89 88 81 69 51 76 70 72 67 99 82 65 51 97 119 81 112 122 53 89 55 52 47 49 72 76 67 119 57 83 109 43 98 110 107 79 120 121 69 49 80 119 69 65 88 10 53 79 48 79 47 70 77 66 47 112 107 86 110 78 98 121 122 80 85 114 97 121 88 119 71 87 111 84 69 56 54 117 53 51 98 56 79 115 87 105 109 81 113 98 99 81 102 122 112 99 105 70 98 114 47 87 110 115 47 120 98 73 99 111 10 116 74 74 55 89 82 86 116 109 82 52 110 57 78 118 106 101 55 53 85 111 71 55 55 54 116 89 72 90 79 52 77 112 115 49 70 76 114 50 104 43 77 81 120 108 90 66 79 69 102 76 110 120 97 55 105 113 83 57 119 71 65 121 100 10 66 97 49 52 82 79 107 104 65 111 71 66 65 79 52 68 83 108 80 49 104 90 47 73 97 115 122 107 89 71 115 72 83 52 121 70 86 122 100 109 51 84 98 73 78 73 57 50 107 100 70 111 71 99 72 99 54 51 109 114 77 49 113 90 10 79 85 54 86 87 78 87 98 122 84 83 106 118 43 98 74 100 80 86 89 121 73 86 73 106 98 111 98 57 110 110 107 97 65 109 74 108 111 71 102 85 74 114 113 101 107 110 90 105 100 105 49 87 122 66 73 57 121 109 47 112 77 78 79 10 71 100 79 68 78 99 117 80 73 43 89 55 100 89 109 86 80 65 71 57 105 110 83 106 82 120 56 48 97 80 99 119 76 82 98 104 103 80 87 70 113 97 87 115 101 102 51 117 120 120 56 70 113 102 68 70 65 111 71 66 65 80 110 115 10 108 90 77 70 66 103 89 115 70 55 108 116 72 117 85 69 77 97 80 70 99 71 109 88 90 77 74 80 70 118 76 117 55 103 119 87 68 70 69 87 68 86 65 113 51 69 51 109 122 49 82 106 90 73 51 76 67 122 108 78 65 82 120 109 10 65 102 98 81 71 101 114 78 122 99 50 82 73 48 82 76 110 97 83 110 98 67 90 108 82 51 84 49 68 48 54 65 100 76 54 112 108 121 71 69 103 76 54 52 68 99 73 119 48 110 57 98 51 86 51 104 102 109 69 71 51 100 118 53 10 97 119 68 74 120 111 89 105 109 54 48 79 71 90 118 112 98 47 67 49 89 84 90 78 82 78 69 119 89 56 118 76 119 97 114 43 81 55 89 118 65 111 71 66 65 74 116 108 56 74 67 83 118 66 84 80 119 78 78 88 120 73 47 56 10 113 108 110 114 56 84 55 78 51 86 55 89 74 109 69 73 116 68 110 53 56 116 56 57 81 48 48 106 57 120 113 79 56 102 105 90 122 43 57 102 107 119 74 115 97 50 51 101 87 73 117 98 49 81 103 89 106 57 104 85 83 51 47 89 10 72 103 107 107 71 79 48 50 118 71 84 52 57 76 68 107 53 72 104 109 75 69 121 70 82 48 75 116 121 111 66 116 114 76 85 74 100 81 85 98 120 118 43 97 69 75 113 115 107 103 111 56 50 51 111 57 53 77 67 57 56 107 53 53 10 50 79 97 89 103 120 57 75 106 114 73 74 119 51 105 69 47 117 77 70 83 113 104 86 65 111 71 65 102 76 112 65 114 53 51 76 77 116 116 103 102 54 55 103 119 48 84 68 106 85 115 107 51 100 50 114 99 72 110 79 74 122 70 115 10 53 101 85 47 65 108 121 121 67 106 100 74 117 83 115 101 102 54 119 87 54 57 106 81 89 105 108 51 67 51 103 120 78 76 56 73 111 68 70 84 113 50 114 113 111 100 80 109 43 100 121 65 85 101 48 114 113 48 102 57 43 112 121 76 10 74 118 103 50 76 52 107 85 81 53 112 82 97 51 43 52 72 99 49 51 47 98 108 105 118 65 79 85 82 52 115 68 104 117 73 115 84 74 99 76 65 71 80 81 68 103 113 68 84 105 115 72 78 47 86 54 67 98 104 80 112 99 54 114 10 101 97 51 112 108 119 115 67 103 89 65 97 48 98 66 43 48 72 79 108 104 113 86 82 87 99 90 71 105 116 56 74 107 108 110 88 79 121 98 116 50 113 77 77 108 67 121 52 73 111 76 79 107 115 99 99 110 86 54 78 84 67 97 121 10 113 70 108 48 53 71 43 115 43 109 89 75 81 65 87 68 104 107 85 80 84 118 69 81 108 75 75 69 108 67 103 51 51 108 115 69 115 78 84 68 88 100 73 105 51 107 66 83 89 54 110 66 105 101 97 122 89 72 70 118 105 80 106 54 10 101 79 117 107 119 99 98 108 68 84 49 50 81 113 116 117 82 47 89 55 108 43 109 81 112 49 116 47 54 101 111 81 87 98 98 75 103 78 120 67 108 70 122 76 74 122 83 79 113 121 107 69 101 103 61 61 10 45 45 45 45 45 69 78 68 32 82 83 65 32 80 82 73 86 65 84 69 32 75 69 89 45 45 45 45 45 10]"
	//rsaPubKey = BytesToPublicKey([]byte(rsaPubKey))

	// 4) Encrypt AES key with RSA key
	// We have to send this to the user along with the file
	// Returns bytes
	//rsaCipher := EncryptWithPublicKey(key, rsaPubKey)

	// 5) Create transaction on the blockchain
	//		Include fileID, fileLoc
	// Call another package to do this
	return
}
